snippet cl
	# Class:: $1
	#
	# Parameters:
	#
	# Actions:
	#
	# Requires:
	#
	# Sample Usage:
	#
	class ${1:classname} {
		${2:# code}
	}

snippet clin
	# Class:: $1 inherits $2
	#
	# Parameters:
	#
	# Actions:
	#
	# Requires:
	#
	# Sample Usage:
	#
	class ${1:classname} inherits ${2:classname} {
		${3:# code}
	}

snippet def
	# Define:: $1
	#
	# Parameters: $2
	#
	# Actions:
	#
	# Requires:
	#
	# Sample Usage:
	#
	define ${1:typename}(${2:args}) {
		${3:# code}
	}

snippet node
	node '${1:name}' {
		${2:# code}
	}

snippet nodein
	node '${1:name}' inherits '${2:name}' {
		${3:# code}
	}

#############################################################################
# CONDITIONALS

snippet if
	if $${1:variable} ${2:==} ${3:'value'} {
		${4:# code}
	}

snippet ifelse
	if $${1:variable} ${2:==} ${3:'value'} {
		${4:# code}
	}
		${5:# code}
	}

snippet elsif
	elsif $${1:variable} {
		${2:# code}
	}

snippet elsifelse
	elsif $${1:variable} {
		${2:# code}
	} else {
		${3:# code}
	}

snippet $?
	$${1:variable} ? {
		${2:value} => ${3:result},
		default => ${4:result},
	},

snippet case
	case $${1:variable} {
		${2:value}: {
			${3:# code}
		}
		default: {
			${4:# code}
		}
	}


#############################################################################
# BUILT IN FUNCTIONS

snippet alert
	alert('${1:string}')

snippet crit
	crit('${1:string}')

snippet debug
	debug('${1:string}')

snippet defined
	defined(${1:resource})

snippet emerg
	emerg('${1:string}')

snippet err
	err('${1:string}')

snippet extlookup
	extlookup('${1:key}', '${2:default value}')

snippet fail
	fail('${1:string}')

snippet file
	file('${1:path}')

snippet rfile
	file {
		'${1:filename}':
			ensure => ${2:file|directory},
			source => 'puppet:///${3:filesource}',
	}

snippet rfilet
	file {
		'${1:filename}':
			ensure  => ${2:file|directory},
			content => template('${3:modulename}/${4:erbfile}'),
	}

snippet subdir
	file {
		[
			'${1:path}',
			'${2:path}'
		]:
			ensure => directory,
	}

snippet fqdn
	fqdn_rand(${1:range})

snippet generate
	generate('${1:command}')

snippet inc
	include ${1:classname}

snippet info
	info('${1:string}')

snippet inline
	inline_template('${1:string}')

snippet md5
	md5('${1:string}')

snippet notice
	notice('${1:string}')

snippet pack
	package {
		'${1:string}':
			ensure => ${2:latest},
	}	

snippet packreq
	package {
		'${1:string}':
			ensure  => ${2:latest},
			require => ${3:ResourceType}['${4:resource}'],
	}	

snippet realize
	realize(${1:string})

snippet regsubst
	regsubst($${1:target}, /${2:regexp}/, '${3:replacement}')

snippet require
	require ${1:classname}

snippet search
	search(${1:namespace})

snippet serv
	service {
		'${1:servicename}':
			enable		 => true,
			hasrestart => true,
			hasstatus  => true,
			require    => ${2:ResourceType}['${3:resource}'],
	}

snippet servp
	# Class:: $1
	#
	# Parameters:
	#
	# Actions:
	#
	# Requires:
	#
	# Sample Usage:
	#
	class ${1:classname} {
		service {
			'${2:servicename}':
				enable		 => true,
				hasrestart => true,
				hasstatus  => true,
				require    => ${3:ResourceType}['${4:resource}'],
		}
	}
	# Class:: $1
	
	# Class:: $1::enable inherits $1
	#
	class $1::enable inherits $1 {
		Service['$2'] { ensure => running, enable => true }
	}
	# Class:: $1::enable

	# Class:: $1::disable inherits $1
	#
	class $1::disable inherits $1 {
		Service['$2'] { ensure => stopped, enable => false }
	}
	# Class:: $1::disable

snippet sha1
	sha1(${1:string})

snippet quote
	shellquote(${1:args})

snippet split
	split($${1:string}, '${2:regexp}')

snippet sprintf
	sprintf('${1:string}', ${2:args})

snippet tag
	tag('${1:string}')

snippet tagged
	tagged('${1:string}')

snippet template
	template('${1:path}')

snippet versioncmp
	versioncmp('${1:a}', '${2:b}')

snippet warn
	warning('${1:string}')

snippet exec
	exec {
		'${1:command}':
			cwd     => '${2:directory}',
			creates => '${3:file}',
			path    => ['/usr/bin', '/usr/sbin', '/usr/local/bin', '${4:path}'],
			timeout => ${5:seconds},
	}
